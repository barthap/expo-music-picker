{"version":3,"file":"MusicPickerModule.web.js","sourceRoot":"","sources":["../src/MusicPickerModule.web.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  Platform,\n} from \"expo-modules-core\";\nimport {\n  MusicPickerOptions,\n  PickerResult,\n  MusicItem,\n} from \"./ExpoMusicPicker.types\";\nimport musicMetadata, {\n  IPicture,\n  parseBlob,\n  selectCover,\n} from \"music-metadata-browser\";\n\nexport default {\n  async getPermissionsAsync(): Promise<PermissionResponse> {\n    return {\n      status: PermissionStatus.GRANTED,\n      expires: \"never\",\n      granted: true,\n      canAskAgain: true,\n    };\n  },\n  async requestPermissionsAsync(): Promise<PermissionResponse> {\n    return {\n      status: PermissionStatus.GRANTED,\n      expires: \"never\",\n      granted: true,\n      canAskAgain: true,\n    };\n  },\n  async openMusicLibraryAsync(\n    options: MusicPickerOptions\n  ): Promise<PickerResult> {\n    // SSR guard\n    if (!Platform.isDOMAvailable) {\n      return { cancelled: true };\n    }\n    return await openFileBrowserAsync(options);\n  },\n};\n\nfunction openFileBrowserAsync<T extends MusicPickerOptions>({\n  allowMultipleSelection = false,\n  includeArtworkImage = false,\n}: T): Promise<PickerResult> {\n  const input = document.createElement(\"input\");\n  input.style.display = \"none\";\n  input.setAttribute(\"type\", \"file\");\n  input.setAttribute(\"accept\", \"audio/*\");\n  // input.setAttribute('id', v4());\n  if (allowMultipleSelection) {\n    input.setAttribute(\"multiple\", \"multiple\");\n  }\n  document.body.appendChild(input);\n\n  return new Promise((resolve, reject) => {\n    input.addEventListener(\"change\", async () => {\n      if (input.files) {\n        if (!allowMultipleSelection) {\n          const item: MusicItem = await readFile(input.files[0], {\n            includeArtworkImage,\n          });\n          resolve({\n            cancelled: false,\n            items: [item],\n          });\n        } else {\n          const songs: MusicItem[] = await Promise.all(\n            Array.from(input.files).map((file) =>\n              readFile(file, { includeArtworkImage })\n            )\n          );\n          resolve({\n            cancelled: false,\n            items: songs,\n          });\n        }\n      }\n      document.body.removeChild(input);\n    });\n\n    const event = new MouseEvent(\"click\");\n    input.dispatchEvent(event);\n  });\n}\n\nasync function readFile(\n  targetFile: Blob,\n  options: MusicPickerOptions\n): Promise<MusicItem> {\n  const metadata = await parseBlob(targetFile, {\n    duration: true,\n    skipCovers: !options.includeArtworkImage,\n  });\n  const url = window.URL.createObjectURL(targetFile);\n\n  const { title, track, album, artist, year } = metadata.common;\n\n  const picture = selectCover(metadata.common.picture);\n  console.log(picture);\n  const cover = await parseCoverImage(picture);\n\n  return {\n    uri: url,\n    id: -1,\n    durationSeconds: metadata.format.duration ?? -1,\n    album,\n    artist,\n    title,\n    track: track.no ?? undefined,\n    year,\n    artworkImage: cover ?? undefined,\n  };\n}\n\nasync function parseCoverImage(image: IPicture | null): Promise<{\n  width: number;\n  height: number;\n  base64Data: string;\n} | null> {\n  if (!image) return null;\n  const { data, type } = image;\n\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = () => {\n      reject(\n        new Error(\n          `Failed to read the selected media because the operation failed.`\n        )\n      );\n    };\n    reader.onload = ({ target }) => {\n      const uri = (target as any).result;\n      const fail = () => resolve(null);\n\n      if (typeof uri === \"string\") {\n        const image = new Image();\n        // for some reason, the library returns image base64 data,\n        // but with application/octet-stream mime type\n        image.src = uri.replace(\n          \"application/octet-stream\",\n          type ?? \"image/jpeg\"\n        );\n        image.onload = () =>\n          resolve({\n            width: image.naturalWidth ?? image.width,\n            height: image.naturalHeight ?? image.height,\n\n            // The blob's result cannot be directly decoded as Base64 without\n            // first removing the Data-URL declaration preceding the\n            // Base64-encoded data. To retrieve only the Base64 encoded string,\n            // first remove data:*/*;base64, from the result.\n            // https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n            base64Data: uri.substr(uri.indexOf(\",\") + 1),\n          });\n        image.onerror = () => fail;\n      } else {\n        fail();\n      }\n    };\n\n    reader.readAsDataURL(new Blob([new Uint8Array(data)]));\n  });\n}\n"]}