{"version":3,"file":"ExpoMusicPicker.js","sourceRoot":"","sources":["../src/ExpoMusicPicker.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,kBAAkB,EAAE,YAAY,EAAgB,MAAM,mBAAmB,CAAC;AAExG,OAAO,mBAAiD,MAAM,uBAAuB,CAAA;AAErF,kEAAkE;AAClE,4EAA4E;AAC5E,MAAM,eAAe,GAAG,mBAAmB,CAAC,iBAAiB,CAAC,CAAC;AAE/D,iCAAiC;AACjC,MAAM,CAAC,MAAM,EAAE,GAAG,eAAe,CAAC,EAAE,CAAC;AAErC,MAAM,UAAU,KAAK;IACnB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;AACjC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,KAAa;IAC/C,OAAO,MAAM,eAAe,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AACpD,CAAC;AAED,6FAA6F;AAC7F,6EAA6E;AAC7E,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC;AAMrE,MAAM,UAAU,iBAAiB,CAAC,QAA6C;IAC7E,OAAO,OAAO,CAAC,WAAW,CAAqB,UAAU,EAAE,QAAQ,CAAC,CAAC;AACvE,CAAC;AAED,OAAO,EACL,mBAAmB,EAEpB,CAAC","sourcesContent":["import { requireNativeModule, NativeModulesProxy, EventEmitter, Subscription } from 'expo-modules-core';\n\nimport ExpoMusicPickerView, { ExpoMusicPickerViewProps } from './ExpoMusicPickerView'\n\n// It loads the native module object from the JSI or falls back to\n// the bridge module (from NativeModulesProxy) if the remote debugger is on.\nconst ExpoMusicPicker = requireNativeModule('ExpoMusicPicker');\n\n// Get the native constant value.\nexport const PI = ExpoMusicPicker.PI;\n\nexport function hello(): string {\n  return ExpoMusicPicker.hello();\n}\n\nexport async function setValueAsync(value: string) {\n  return await ExpoMusicPicker.setValueAsync(value);\n}\n\n// For now the events are not going through the JSI, so we have to use its bridge equivalent.\n// This will be fixed in the stable release and built into the module object.\nconst emitter = new EventEmitter(NativeModulesProxy.ExpoMusicPicker);\n\nexport type ChangeEventPayload = {\n  value: string;\n};\n\nexport function addChangeListener(listener: (event: ChangeEventPayload) => void): Subscription {\n  return emitter.addListener<ChangeEventPayload>('onChange', listener);\n}\n\nexport {\n  ExpoMusicPickerView,\n  ExpoMusicPickerViewProps\n};\n"]}